// ====== BACKEND EXPRESS API ======

const express = require("express");
const router = express.Router();
const db = require("../db"); // Assumiamo un modulo db con connessione MySQL

// GET tutte le schede (con filtri opzionali)
router.get("/schede-multi", async (req, res) => {
  try {
    const { commessa_id, tipo } = req.query;
    const conditions = [];
    const params = [];

    if (commessa_id) {
      conditions.push("commessa_id = ?");
      params.push(commessa_id);
    }
    if (tipo) {
      conditions.push("tipo = ?");
      params.push(tipo);
    }

    const where = conditions.length ? `WHERE ${conditions.join(" AND ")}` : "";
    const [rows] = await db.query(`SELECT * FROM SchedeMulti ${where}`, params);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: "Errore durante il recupero delle schede" });
  }
});

// POST nuova scheda
router.post("/schede-multi", async (req, res) => {
  try {
    const { commessa_id, tipo, titolo, descrizione } = req.body;
    await db.query(
      `INSERT INTO SchedeMulti (commessa_id, tipo, titolo, descrizione, data_creazione) VALUES (?, ?, ?, ?, CURDATE())`,
      [commessa_id, tipo, titolo, descrizione]
    );
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "Errore durante la creazione della scheda" });
  }
});

// GET note associate a una scheda
router.get("/schede-multi/:id/note", async (req, res) => {
  try {
    const [rows] = await db.query("SELECT * FROM SchedeMultiNote WHERE scheda_multi_id = ? ORDER BY data DESC", [req.params.id]);
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: "Errore durante il recupero delle note" });
  }
});

// POST nuova nota per una scheda
router.post("/schede-multi/:id/note", async (req, res) => {
  try {
    const { data, tipo_interno, autore, contenuto, allegato_path } = req.body;
    await db.query(
      `INSERT INTO SchedeMultiNote (scheda_multi_id, data, tipo_interno, autore, contenuto, allegato_path)
       VALUES (?, ?, ?, ?, ?, ?)`,
      [req.params.id, data, tipo_interno, autore, contenuto, allegato_path || null]
    );
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "Errore durante l'aggiunta della nota" });
  }
});

// PUT modifica nota
router.put("/note/:id", async (req, res) => {
  try {
    const { data, tipo_interno, autore, contenuto, allegato_path } = req.body;
    await db.query(
      `UPDATE SchedeMultiNote SET data=?, tipo_interno=?, autore=?, contenuto=?, allegato_path=? WHERE id=?`,
      [data, tipo_interno, autore, contenuto, allegato_path, req.params.id]
    );
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "Errore durante la modifica della nota" });
  }
});

// DELETE nota
router.delete("/note/:id", async (req, res) => {
  try {
    await db.query("DELETE FROM SchedeMultiNote WHERE id = ?", [req.params.id]);
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: "Errore durante l'eliminazione della nota" });
  }
});

module.exports = router;
